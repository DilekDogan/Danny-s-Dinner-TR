SELECT *
FROM SALES;


SELECT*
FROM MENU;


SELECT *
FROM MEMBERS;

-- 1-Her bir müşterinin restoranda harcadığı toplam tutar nedir?

SELECT S.CUSTOMER_ID AS CUSTUMERS,
	SUM(M.PRICE) AS SUM_PRICE
FROM SALES AS S
JOIN MENU AS M ON M.PRODUCT_ID = S.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC;

--2-Her bir müşteri restorantı kaç gün ziyaret etmiştir?

SELECT COUNT(DISTINCT(S.ORDER_DATE)),
	CUSTOMER_ID
FROM SALES AS S
JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY 2
ORDER BY 1 DESC;

--3-Her bir müşterinin menüden satın aldığı ilk ürün nedir?
 WITH FIRST_PRODUCT AS
	(SELECT S.CUSTOMER_ID,
			S.ORDER_DATE,
			M.PRODUCT_NAME,
			RANK() OVER(PARTITION BY CUSTOMER_ID
															ORDER BY ORDER_DATE) AS RN
		FROM SALES AS S
		JOIN MENU AS M ON M.PRODUCT_ID = S.PRODUCT_ID)
SELECT DISTINCT(CUSTOMER_ID),
	PRODUCT_NAME
FROM FIRST_PRODUCT
WHERE RN = 1
ORDER BY 1 ;

--4-Menüde en çok satın alınan ürün nedir ve tüm müşteriler tarafından kaç kez satın alınmıştır?

SELECT M.PRODUCT_NAME,
	COUNT(S.PRODUCT_ID)
FROM SALES AS S
JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;

--5-Her bir müşterinin en popüler ürünü hangisidir?

SELECT S.CUSTOMER_ID,
	PRODUCT_NAME,
	COUNT(S.PRODUCT_ID) AS CP,
	RANK() OVER(PARTITION BY S.CUSTOMER_ID
													ORDER BY COUNT(S.PRODUCT_ID) DESC)
FROM SALES AS S
JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
GROUP BY S.CUSTOMER_ID,
	PRODUCT_NAME;

-------------------2.YOL----------------------------
WITH TB AS
	(SELECT S.CUSTOMER_ID,
			M.PRODUCT_NAME,
			COUNT(S.PRODUCT_ID) AS CP,
			RANK() OVER(PARTITION BY S.CUSTOMER_ID
															ORDER BY COUNT(S.PRODUCT_ID) DESC) AS RN
		FROM SALES AS S
		JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
		GROUP BY S.CUSTOMER_ID,
			M.PRODUCT_NAME)
SELECT CUSTOMER_ID,
	PRODUCT_NAME, CP
FROM TB
WHERE RN = 1
ORDER BY 1;

--6.Müşteri üye olduktan sonra ilk olarak hangi ürünü satın aldı?
WITH RANKED_DATA AS
	(SELECT MEM.JOIN_DATE,
			ME.PRODUCT_NAME,
			S.CUSTOMER_ID,
			S.ORDER_DATE,
			ROW_NUMBER() OVER(PARTITION BY S.CUSTOMER_ID
																					ORDER BY S.ORDER_DATE) AS RN
		FROM MENU ME
		JOIN SALES S ON S.PRODUCT_ID = ME.PRODUCT_ID
		JOIN MEMBERS MEM ON MEM.CUSTOMER_ID = S.CUSTOMER_ID
		WHERE S.ORDER_DATE >= MEM.JOIN_DATE
		GROUP BY MEM.JOIN_DATE,
			ME.PRODUCT_NAME,
			S.CUSTOMER_ID,
			S.ORDER_DATE)
SELECT JOIN_DATE,
	ORDER_DATE,
	CUSTOMER_ID,
	PRODUCT_NAME
FROM RANKED_DATA
WHERE RN = 1
ORDER BY ORDER_DATE;

--7.Müşteri üye olmadan hemen önce hangi ürünü satın almıştır?
 WITH RANKED_DATA AS
	(SELECT MEM.JOIN_DATE,
			ME.PRODUCT_NAME,
			S.CUSTOMER_ID,
			S.ORDER_DATE,
			RANK() OVER(PARTITION BY S.CUSTOMER_ID
															ORDER BY S.ORDER_DATE DESC) AS RN
		FROM MENU ME
		JOIN SALES S ON S.PRODUCT_ID = ME.PRODUCT_ID
		JOIN MEMBERS MEM ON MEM.CUSTOMER_ID = S.CUSTOMER_ID
		WHERE S.ORDER_DATE < MEM.JOIN_DATE
		GROUP BY MEM.JOIN_DATE,
			ME.PRODUCT_NAME,
			S.CUSTOMER_ID,
			S.ORDER_DATE)
SELECT JOIN_DATE,
	ORDER_DATE,
	CUSTOMER_ID,
	PRODUCT_NAME
FROM RANKED_DATA
WHERE RN = 1
ORDER BY ORDER_DATE;

--8.Üye olmadan önce her bir üyenin yapmış olduğu toplam harcama tutarı ve adedi nedir?

SELECT S.CUSTOMER_ID,
	SUM(M.PRICE),
	COUNT(M.PRODUCT_ID)
FROM MEMBERS AS MEM
JOIN SALES AS S ON S.CUSTOMER_ID = MEM.CUSTOMER_ID
JOIN MENU AS M ON S.PRODUCT_ID = M.PRODUCT_ID
WHERE S.ORDER_DATE < MEM.JOIN_DATE
GROUP BY 1
ORDER BY 1,2;

--9.Harcanan her 1 dolar 10 puana eşitse ve sushi 2 kat puan çarpanına sahipse,her müşterinin kaç puanı olur?
 WITH POINTT AS
	(SELECT CUSTOMER_ID,
			PRODUCT_NAME,
			CASE
							WHEN M.PRODUCT_NAME = 'sushi' THEN PRICE * 10 * 2
							ELSE PRICE * 10
			END POINTS
		FROM SALES AS S
		JOIN MENU AS M ON M.PRODUCT_ID = S.PRODUCT_ID)
SELECT CUSTOMER_ID,
	SUM(POINTS)
FROM POINTT
GROUP BY 1
ORDER BY 2 DESC;

--10.Bir müşteri programa katıldıktan sonraki ilk haftada(katılma tarihi dahil)sadece suşide değil, tüm yiyeceklerde 2 kat puan kazanır.
--A ve B müşterisi Ocak ayı sonunda kaç puana sahip olur?
WITH ORDER_JAN AS
	(SELECT S.CUSTOMER_ID,
			JOIN_DATE START_DATE,
			JOIN_DATE + 6 END_DATE,
			ORDER_DATE,
			PRODUCT_NAME,
			PRICE,
			CASE
							WHEN ORDER_DATE BETWEEN JOIN_DATE AND JOIN_DATE + 6 THEN PRICE * 20
							WHEN PRODUCT_NAME = 'sushi' THEN PRICE * 20
							ELSE PRICE * 10
			END AS POINTS
		FROM SALES AS S
		JOIN MENU M ON M.PRODUCT_ID = S.PRODUCT_ID
		JOIN MEMBERS MEM ON MEM.CUSTOMER_ID = S.CUSTOMER_ID
		WHERE ORDER_DATE <= '2021-01-31')
SELECT CUSTOMER_ID,
	SUM(POINTS)
FROM ORDER_JAN
GROUP BY 1 ;

-- BONUS 1 üye ise Y değil ise N

SELECT S.CUSTOMER_ID,
	ORDER_DATE,
	PRODUCT_NAME,
	PRICE,
	JOIN_DATE,
	CASE
					WHEN JOIN_DATE IS NULL THEN 'N'
					WHEN ORDER_DATE >= JOIN_DATE THEN 'Y'
					ELSE 'N'
	END MEMBER
FROM SALES S
JOIN MENU AS M ON M.PRODUCT_ID = S.PRODUCT_ID
LEFT JOIN MEMBERS MEM ON MEM.CUSTOMER_ID = S.CUSTOMER_ID --C müşterisinin gelmesi için
ORDER BY 1,2;